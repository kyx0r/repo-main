diff --git a/Modules/_ssl.c_ b/Modules/_ssl.c
index a7a278d..e3731e1 100644
--- a/Modules/_ssl.c_
+++ b/Modules/_ssl.c
@@ -4729,46 +4729,15 @@ _ssl__SSLContext_sni_callback_set_impl(PySSLContext *self, PyObject *value)
 }
 
 #if OPENSSL_VERSION_NUMBER < 0x30300000L
-static X509_OBJECT *x509_object_dup(const X509_OBJECT *obj)
+X509_OBJECT *x509_object_dup(const X509_OBJECT *obj)
 {
-    int ok;
-    X509_OBJECT *ret = X509_OBJECT_new();
-    if (ret == NULL) {
-        return NULL;
-    }
-    switch (X509_OBJECT_get_type(obj)) {
-        case X509_LU_X509:
-            ok = X509_OBJECT_set1_X509(ret, X509_OBJECT_get0_X509(obj));
-            break;
-        case X509_LU_CRL:
-            /* X509_OBJECT_get0_X509_CRL was not const-correct prior to 3.0.*/
-            ok = X509_OBJECT_set1_X509_CRL(
-                ret, X509_OBJECT_get0_X509_CRL((X509_OBJECT *)obj));
-            break;
-        default:
-            /* We cannot duplicate unrecognized types in a polyfill, but it is
-             * safe to leave an empty object. The caller will ignore it. */
-            ok = 1;
-            break;
-    }
-    if (!ok) {
-        X509_OBJECT_free(ret);
-        return NULL;
-    }
-    return ret;
+	return NULL;
 }
 
-static STACK_OF(X509_OBJECT) *
+STACK_OF(X509_OBJECT) *
 X509_STORE_get1_objects(X509_STORE *store)
 {
-    STACK_OF(X509_OBJECT) *ret;
-    if (!X509_STORE_lock(store)) {
         return NULL;
-    }
-    ret = sk_X509_OBJECT_deep_copy(X509_STORE_get0_objects(store),
-                                   x509_object_dup, X509_OBJECT_free);
-    X509_STORE_unlock(store);
-    return ret;
 }
 #endif
 
